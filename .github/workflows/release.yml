# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  publish_container:
    name: Publish container to GitHub container registry
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      CI: "true"
      REGISTRY_IMAGE: devops-at-home/projen-nodejs-container
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64
      - name: Login to container registry
        env:
          GH_TOKEN: ${{ secrets.PROJEN_GITHUB_TOKEN }}
        run: echo "$GH_TOKEN" | docker login ghcr.io -u devops-at-home --password-stdin
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Get release tag
        id: get-release-tag
        run: echo "RELEASE_TAG=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT
      - name: Download release
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_TAG: ${{ steps.get-release-tag.outputs.RELEASE_TAG }}
        run: 'curl -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -L "https://api.github.com/repos/${GITHUB_REPOSITORY}/tarball/${RELEASE_TAG}" -o release.tar.gz'
      - name: Extract and get folder name
        id: extract-folder
        run: tar xf release.tar.gz; FOLDER_NAME=$(find . -maxdepth 1 -name "${GITHUB_REPOSITORY_OWNER}*"); echo FOLDER_NAME=$FOLDER_NAME | tee -a $GITHUB_OUTPUT
      - name: Build and push Docker image
        env:
          RELEASE_TAG: ${{ steps.get-release-tag.outputs.RELEASE_TAG }}
        run: docker buildx build --platform linux/amd64 --platform linux/arm64 --output "type=image,push=true" --tag ghcr.io/devops-at-home/projen-nodejs-container:$RELEASE_TAG --tag ghcr.io/devops-at-home/projen-nodejs-container:latest --build-arg NODE_CONTAINER_VERSION=lts-alpine .
        working-directory: ${{ steps.extract-folder.outputs.FOLDER_NAME }}
      - name: Test Docker image
        env:
          RELEASE_TAG: ${{ steps.get-release-tag.outputs.RELEASE_TAG }}
        run: docker run --rm ghcr.io/devops-at-home/projen-nodejs-container:$RELEASE_TAG
      - name: Logout from Docker registry
        run: docker logout ghcr.io
